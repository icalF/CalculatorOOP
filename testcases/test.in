( 1 + 2 ) * 3
( ( 1 + 2 ) * 3 ) / 9
( ( ( 1 + 2 ) * 3 ) / 9 ) - 82
( ( ( ( 1 + 2 ) * 3 ) / 9 ) - 82 ) * 0.5
( ( ( ( ( 1 + 2 ) * 3 ) / 9 ) - 82 ) * 0.5 ) / 3
( ( ( ( ( ( 1 + 2 ) * 3 ) / 9 ) - 82 ) * 0.5 ) / 3 ) + 100
set logic
( ( ( ( ( ( ( 1 + 2 ) * 3 ) / 9 ) - 82 ) * 0.5 ) / 3 ) + 100 ) > ( ( ( ( 1 + 2 ) * 3 ) / 9 ) - 82 ) 
( ( ( ( ( ( ( 1 + 2 ) * 3 ) / 9 ) - 82 ) * 0.5 ) / 3 ) + 100 ) and true
true == 1
false == 0
( true or false ) xor false
( ( true or false ) xor false ) and true
( ( true or false ) xor false ) or ( 1 > 3 )
( ( true or false ) xor false ) and false
( ( true or false ) xor false ) and true
( ( true or false ) xor false ) and ( ( ( true or false ) xor false ) and true ) 
( not ( ( true or false ) xor false ) ) 
( ( true or false ) xor false ) and true and false and true
( true or false ) xor false and not true
( ( ( ( 5 * 3 * 17 * 19 * 23 ) ) ) >= 9876 ) or ( ( false and false ) and not true )
set math
( ( 10000	* 500.12 ) + ( 200 - 185 ) - 205 )
0.8679 - 0.57484 - 0.48384 - 0.474835 - 0.637496
( ( 500 * 10000 ) + 305.5 ) * 360 / 340
200 - 305 - 10000 - 320 - 165
( ( 185 + 360	) * 320	) + ( 10000 / 302 )
0.8679 - 0.57484 - 0.48384 - 0.474835 - 0.637496
( 205 > 340 ) and ( ( 165 <= 302 ) or 10000 )
( 3 * 5 > 100 ) or ( 2 * 3 * 4 )
2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2
( ( ( 2 + ( 4 - 5 ) ) < ( ( 8 - 2 ) div ( ( 3 - 4 ) + 5 ) ) ) )
( not false and not true )
true and not true xor ( ( 3 * 4 * 6 * 4 * 3 ) > 199 ) and false
( 0.5 * 0.5 * 0.5 * 0.5 * 0.5 ) = 3 * 4
not ( 5 > 7 )
0.8679 * 0.57484 * 0.48384 * 0.474835 * 0.637496
true and false and ( ( ( ( ( 200 ) * 1234 + 10 ) / 10 ) > 2015 ) )
((((((((( 1 div 2 div 3 div 4 div 5 div 6 div 7 div 8 div 9 )))))))))
( 2014 * 130110119 ) > 2015 and 2010 and 2011 and 2012 
( ( ( 1 + 2 * 3 ) mod ( 200 ) * 1234 + 10 ) > 10 ) and false
( ( 73849 * 1.2 + 3.45 ) > 100 ) or ( ( 73849 * 1.2 + 3.45 ) < 100 )
( ( ( ( 5 * 3 * 17 * 19 * 23 ) ) ) >= 9876 ) or true
( ( ( false and false ) and false ) and false ) and false
( true or true ) + ( 0.5 * 12 / 23.23 * 34.34 ) = ( 45.45 * 56.56 / 21 * 5.0 )
(((((((((((((((((((((((((((((((((((not true)))))))))))))))))))))))))))))))))))
not true xor false and 10 = 1023
( 1 + 2 + 2 + 1 ) mod 2 * ( 2 ) 
A + P + A + K + A + B + A + R
2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2
12 + 12 - ( 90 * ( 67 - 56 ) + 23 * 290 )
( ( ( 500 * 10000 ) + 305.5 ) * 360 / 340 ) and true
( ( 73849 * 1.2 + 3.45 ) > 100 ) and ( ( 73849 * 1.2 + 3.45 ) < 100 )
( ( ( 1 + 2 * 3 ) mod ( 200 ) * 1234 + 10 ) > 10 ) xor true
( ( ( 200 ) * 1234 + 10 ) > 10 ) xor true
0.8679 + 0.57484 + 0.48384 + 0.474835 + 0.637496
( 2.3748 * 3.7745 / 4.8942 ) and ( 2.3748 / 3.7745 * 4.8942 )
( 89 * 3 ) + 100
( 9 - 90 ) + 100
( ( ( 500 * 10000 ) + 305.5 ) * 360 / 340 ) > 100 and true
not true xor ( ( 200 ) * 1234 < 7448 )
( ( 45678 * ( 23456 div 34567 ) div 56789 ) div 56789 )
false or false or false or false or false
true and true and true and true and true
( 1998 + 1999 = 2007 - 2345 ) and ( false and true ) or ( true and false )
( 23 + 24 + 25 ) * 10000
( ( true or true ) ) or false or ( ( 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 ) < 2112 )
12345 * 23456
( 1998.4 + 1999.3 = 2007.2 - 2345.1 ) or ( ( not false ) and true ) or ( true and false )
( 23.1 + 24.2 + 25.3 ) * 10000.4
( ( ( true or true ) ) and ( ( 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 ) < 2112 ) or false or true )
45.6 * 56.7 + 12.3 / 12 / 3.4 / 0.94 / 12.3435 + ( 10 + 10 ) * ( 100 + 100 )
( ( 2424 * 1212 * 23847 ) < 12345 ) and not ( 123.123 * 123.123 ) > 45678
C * H * E * C * K * P * O * I * N * T
1 + 2 * 45 - ( ( ( ( 12 * 345 ) + 23647 ) - 3409 ) * 2 )
23 * ( 12 + 34 ) - ( 90 * 467 ) + 23
234 + 12 = 54 * 65
( ( ( 1 = 1 ) and 2 = 2 ) )
23456 div 34567 
( ( 2 * 8 ) = 16 ) and ( ( ( ( ( 1 = 1 ) and 2 = 2 ) ) ) or ( false ) ) 
false and true
( ( true or true ) ) or false or ( 23 + 12 + 100 * 0.5 )
81 * 81 * 81 = 9 * 9 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + ( 1 + 1 )
( ( 34.5678 + 12.3456 = 12345678.9 ) ) or true
( 45 + 45 - 45 - 45 + ( 0 + 0 + 0 ) = 0 ) and false
789 - 2
( 5 * 6 * 7 * 8 * 9 = 90 ) or ( 89 = 78 ) xor true
true or ( ( 1 + 2 ) = 3 ) 
34567 mod 45678
45678 * ( 23456 div 34567 ) div 56789
6789 + 1
( VIII + III + IX )
( ( VICII + IIMI - IXM ) )
( ( ( VI * IXIXI ) + IXI ) - XXX )
( CCX - IX * X ) > XXI
( ( ( VI * IXIXI ) + IXI ) - XXX ) div ( ( CCX - IX * X ) mod XXI )
( CCX - IX * X ) > ( XXI * ( ( CCX - IX * X ) * XXI ) )
( D * I * D ) - ( ( ( ( VI * IXIXI ) + IXI ) - XXX ) )
( ( ( VI * IXIXI ) + IXI ) - XXX ) + IXXX
( MXXC + MXXC ) mod II
( MXXC + MXXC ) div II
( CCX - IX * X ) <= ( XI * ( ( CC - IX * X ) - XXI ) )
I + II + III + IV + V + VI + VII + IIX + IX + X
( I + II ) div III * IV - V + VI * VII / IIX - IX * X
